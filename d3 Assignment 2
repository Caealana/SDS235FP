<html>
	<head>
		<meta charset="UTF-8">
		<title>Assignment 2</title>
	</head>
	
	<body>
		<style>

		  /* Your CSS goes here */

svg {
  font: 10px sans-serif;
}

.background path {
  fill: none;
  stroke: #ddd;
  shape-rendering: crispEdges;
}

.foreground path {
  fill: none;
  stroke: steelblue;
}

.brush .extent {
  fill-opacity: .3;
  stroke: #fff;
  shape-rendering: crispEdges;
}

.axis line,
.axis path {
  fill: none;
  stroke: #000;
  shape-rendering: crispEdges;
}

.axis text {
  text-shadow: 0 1px 0 #fff, 1px 0 0 #fff, 0 -1px 0 #fff, -1px 0 0 #fff;
  cursor: move;
}
            
.dot {
  stroke: #000;
}
            
.tooltip {
  position: absolute;
  width: 200px;
  height: 28px;
  pointer-events: none;
}

		</style>
		
		<script src="https://d3js.org/d3.v3.min.js"></script>
		
		 


		<script>
		
            
		  /* Your JS code goes here */
            
var margin = {top: 30, right: 10, bottom: 30, left: 35},
    width = 960 - margin.left - margin.right,
    height = 500 - margin.top - margin.bottom;

var x = d3.scale.ordinal().rangePoints([0, width], 1),
    y = {},
    dragging = {};

var line = d3.svg.line(),
    axis = d3.svg.axis().orient("left"),
    background,
    foreground;

var svg = d3.select("body").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
           

d3.tsv("SongData.tsv", function(error, data) {

  // Extract the list of dimensions and create a scale for each.
  x.domain(dimensions = d3.keys(data[0]).filter(function(d) {
    return ['lyrics', 'track_name', 'album_name'].indexOf(d) < 0 && (y[d] = d3.scale.linear()
        .domain(d3.extent(data, function(p) { return +p[d]; }))
        .range([height, 0]));
  }));

  // Add grey background lines for context.
  background = svg.append("g")
      .attr("class", "background")
    .selectAll("path")
      .data(data)
    .enter().append("path")
      .attr("d", path);

  // Add blue foreground lines for focus.
  foreground = svg.append("g")
      .attr("class", "foreground")
    .selectAll("path")
      .data(data)
    .enter().append("path")
      .attr("d", path);

  // Add a group element for each dimension.
  var g = svg.selectAll(".dimension")
      .data(dimensions)
    .enter().append("g")
      .attr("class", "dimension")
      .attr("transform", function(d) { return "translate(" + x(d) + ")"; })
      .call(d3.behavior.drag()
        .origin(function(d) { return {x: x(d)}; })
        .on("dragstart", function(d) {
          dragging[d] = x(d);
          background.attr("visibility", "hidden");
        })
        .on("drag", function(d) {
          dragging[d] = Math.min(width, Math.max(0, d3.event.x));
          foreground.attr("d", path);
          dimensions.sort(function(a, b) { return position(a) - position(b); });
          x.domain(dimensions);
          g.attr("transform", function(d) { return "translate(" + position(d) + ")"; })
        })
        .on("dragend", function(d) {
          delete dragging[d];
          transition(d3.select(this)).attr("transform", "translate(" + x(d) + ")");
          transition(foreground).attr("d", path);
          background
              .attr("d", path)
            .transition()
              .delay(500)
              .duration(0)
              .attr("visibility", null);
        }));

  // Add an axis and title.
  g.append("g")
      .attr("class", "axis")
      .each(function(d) { d3.select(this).call(axis.scale(y[d])); })
    .append("text")
      .style("text-anchor", "middle")
      .attr("y", -9)
      .text(function(d) { return d; });

  // Add and store a brush for each axis.
  g.append("g")
      .attr("class", "brush")
      .each(function(d) {
        d3.select(this).call(y[d].brush = d3.svg.brush().y(y[d]).on("brushstart", brushstart).on("brush", brush));
      })
    .selectAll("rect")
      .attr("x", -8)
      .attr("width", 16);
});

function position(d) {
  var v = dragging[d];
  return v == null ? x(d) : v;
}

function transition(g) {
  return g.transition().duration(500);
}

// Returns the path for a given data point.
function path(d) {
  return line(dimensions.map(function(p) { return [position(p), y[p](d[p])]; }));
}

function brushstart() {
  d3.event.sourceEvent.stopPropagation();
}

// Handles a brush event, toggling the display of foreground lines.
function brush() {
  var actives = dimensions.filter(function(p) { return !y[p].brush.empty(); }),
      extents = actives.map(function(p) { return y[p].brush.extent(); });
  foreground.style("display", function(d) {
    return actives.every(function(p, i) {
      return extents[i][0] <= d[p] && d[p] <= extents[i][1];
    }) ? null : "none";
  });
}


            
            
            
            
            
var x2 = d3.scale.linear()
    .range([0, width]);

var y2 = d3.scale.linear()
    .range([height, 0]);
            
            
var r2 = d3.scale.log()
    .range([1, 4]);
            
var color = d3.scale.category10();
            
var xAxis = d3.svg.axis()
    .scale(x2)
    .orient("bottom");

var yAxis = d3.svg.axis()
    .scale(y2)
    .orient("left");

            
var svg2 = d3.select("body").append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
    .append("g") 
        .attr("transform","translate(" + margin.left + "," + margin.top + ")");
            
         
var xpadding = (x2.domain()[1] - x2.domain()[0]) / 100; 
            
var ypadding = (y2.domain()[1] - y2.domain()[0]) / 100; 
            
// add the tooltip area to the webpage
var tooltip = d3.select("body").append("div")
    .attr("class", "tooltip")
    .style("opacity", 0);
            
d3.tsv("SongData.tsv", function(error, data) { 
    if (error) throw error;
       
    x2.domain([-xpadding, d3.max(data, function(d) { return d.pct_positive; })]).nice();
    y2.domain([-ypadding, d3.max(data, function(d) { return d.pct_sad; })]).nice();
    svg2.append("g")
        .attr("class", "x axis")
        .attr("transform", "translate(0," + height + ")") 
        .call(xAxis)
        .append("text")
          .attr("class", "label")
          .attr("x", width)
          .attr("y", -6)
          .style("text-anchor", "end")
          .text("Lyric Positivity (%)");
        
    svg2.append("g")
        .attr("class", "y axis")
        .call(yAxis)
        .append("text")
          .attr("class", "label")
          .attr("transform", "rotate(-90)")
          .attr("y", 3)
          .attr("dy", ".91em")
          .style("text-anchor", "end")
          .text("Lyric Sadness (%)");
    svg2.selectAll(".dot")
        .data(data) 
        .enter().append("circle")
            .attr("class", "dot")
            .attr("r", function(d) { return (r2(d.valence)+1)*20; })
            .attr("cx", function(d) { return x2(d.pct_positive); }) 
            .attr("cy", function(d) { return y2(d.pct_sad); })
            .attr("fill", function(d) { return color(d.album_release_year); })
            .style("opacity", .8)
            .on("mouseover", function(d) {
                  tooltip.transition()
                       .duration(200)
                       .style("opacity", 1);
                  tooltip.html("Track: " + d.track_name + "<br/> Album: " + d.album_name + "<br/> Valence: " + d.valence)
                       .style("left", x2(d.pct_positive)+700 + "px")
                       .style("top", y2(d.pct_sad)+200 + "px")
                        .style("font-size","10px");
              })
              .on("mouseout", function(d) {
                  tooltip.transition()
                       .duration(500)
                       .style("opacity", 0);
              });

    svg2.append("text")
        .attr("x", (width / 2)) 
        .attr("y", 0 + (margin.top / 2))
        .attr("text-anchor", "middle")
        .text("Mood of Bruno Mars Songs")
        .style("font-size", "25px")

    
    
    var legend = svg2.selectAll(".legend")
      .data(color.domain())
      .enter().append("g")
      .attr("class", "legend")
      .attr("transform", function(d, i) { return "translate(0," + i * 20 + ")"; });
    
    
    // draw legend colored rectangles
  legend.append("rect")
      .attr("x", width - 18)
      .attr("width", 18)
      .attr("height", 18)
      .style("fill", color);
    

  // draw legend text
  legend.append("text")
      .attr("x", width - 24)
      .attr("y", 9)
      .attr("dy", ".35em")
      .style("text-anchor", "end")
      .text(function(d) { return d;})
}); 
            
            
            
            

            
var svg3 = d3.select("body").append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
    .append("g") 
        .attr("transform","translate(" + margin.left + "," + margin.top + ")");
            
         
            
            
d3.tsv("SongData.tsv", function(error, data) { 
    if (error) throw error;
       
    x2.domain([-5, 105]);
    y2.domain([0, 1.0]).nice();
    svg3.append("g")
        .attr("class", "x axis")
        .attr("transform", "translate(0," + height + ")") 
        .call(xAxis)
        .append("text")
          .attr("class", "label")
          .attr("x", width)
          .attr("y", -6)
          .style("text-anchor", "end")
          .text("Glee Index (1-100)");
        
    svg3.append("g")
        .attr("class", "y axis")
        .call(yAxis)
        .append("text")
          .attr("class", "label")
          .attr("transform", "rotate(-90)")
          .attr("y", 3)
          .attr("dy", ".91em")
          .style("text-anchor", "end")
          .text("Energy (0.0-1.0)");
    svg3.selectAll(".dot")
        .data(data) 
        .enter().append("circle")
            .attr("class", "dot")
            .attr("r", function(d) { return (r2(d.danceability)+1)*20; })
            .attr("cx", function(d) { return x2(d.glee_index); }) 
            .attr("cy", function(d) { return y2(d.energy); })
            .attr("fill", function(d) { return color(d.album_release_year); })
            .style("opacity", .8)
            .on("mouseover", function(d) {
                  tooltip.transition()
                       .duration(200)
                       .style("opacity", 1);
                  tooltip.html("Track: " + d.track_name + "<br/> Album: " + d.album_name + "<br/>Danceability: " + d.danceability)
                       .style("left", x2(d.glee_index) + "px")
                       .style("top", y2(d.energy)+1000 + "px")
                        .style("font-size","10px");
              })
              .on("mouseout", function(d) {
                  tooltip.transition()
                       .duration(500)
                       .style("opacity", 0);
              });

    svg3.append("text")
        .attr("x", (width / 2)) 
        .attr("y", 0 + (margin.top / 2))
        .attr("text-anchor", "middle")
        .text("Ultimate Party Playlist?")
        .style("font-size", "25px");
    
    
    var legend = svg3.selectAll(".legend")
      .data(color.domain())
      .enter().append("g")
      .attr("class", "legend")
      .attr("transform", function(d, i) { return "translate(0," + i * 20 + ")"; });
    
    
    // draw legend colored rectangles
  legend.append("rect")
      .attr("x", width - 18)
      .attr("width", 18)
      .attr("height", 18)
      .style("fill", color);
    

  // draw legend text
  legend.append("text")
      .attr("x", width - 24)
      .attr("y", 9)
      .attr("dy", ".35em")
      .style("text-anchor", "end")
      .text(function(d) { return d;})
}); 
                     
		</script> 
  </body>
</html>
